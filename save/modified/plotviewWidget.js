/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Sat Nov 14 2020 18:19:21 GMT-0600 (Central Standard Time).
 */

define(["./plotly-latest.min", "css!./styles/PlotViewWidget.css"], function (
  Plotly
) {
  "use strict";

  var WIDGET_CLASS = "plot-view";

  function PlotViewWidget(logger, container) {
    this._logger = logger.fork("Widget");

    this._el = container;

    //this.nodes = {};
    this._initialize();

    this._logger.debug("ctor finished");
  }

  PlotViewWidget.prototype._initialize = function () {
    var width = this._el.width(),
      height = this._el.height(),
      self = this;

    // set widget class
    this._el.addClass(WIDGET_CLASS);

    // Create a dummy header
    this._el.append(
      '<div id="plot-container" style="width:100%;height:100%;"></div>'
    );

    this._plotContainer = null;
    this.plotTrackNumber = 0;
  };

  PlotViewWidget.prototype.onWidgetContainerResize = function (width, height) {
    this._logger.debug("Widget is resizing...");
    if (this._plotContainer) {
      Plotly.Plots.resize(this._plotContainer);
    }
  };

  // Adding/Removing/Updating items
  PlotViewWidget.prototype.plotData = function (data) {
    if (!this._plotContainer) {
      this._plotContainer = document.getElementById("plot-container");
    }
    if (data) {
      //visualize data if we have and send it to plotly
      this._plotTrackNumber = data.length;
      //send it to plotly
      Plotly.newPlot(this._plotContainer, data);
    } else if (this._plotTrackNumber > 0) {
      //clear the plots if no data
      let traces = [];
      for (let i = 0; i < this._plotTrackNumber; i += 1) {
        traces.push(i);
      }
      Plotly.deleteTraces(this._plotContainer, traces);
      this._plotTrackNumber = 0;
      $(this._plotContainer).empty();
    }
  };

  /* * * * * * * * Visualizer event handlers * * * * * * * */

  //delete the event handlers as these are handled by plotly

  /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
  PlotViewWidget.prototype.destroy = function () {};

  PlotViewWidget.prototype.onActivate = function () {
    this._logger.debug("PlotViewWidget has been activated");
  };

  PlotViewWidget.prototype.onDeactivate = function () {
    this._logger.debug("PlotViewWidget has been deactivated");
  };

  return PlotViewWidget;
});
