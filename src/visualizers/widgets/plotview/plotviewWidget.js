/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Wed Nov 18 2020 08:29:26 GMT-0600 (Central Standard Time).
 */

define([
  "jointjs",
  "css!./styles/PlotViewWidget.css",
  "css!jointjscss",
], function (jointjs) {
  "use strict";

  var WIDGET_CLASS = "plot-view";

  function PlotViewWidget(logger, container) {
    this._logger = logger.fork("Widget");

    this._el = container;

    this.nodes = {};
    this._initialize();

    this._logger.debug("ctor finished");
    this.index = 0;
    this.place = {};
    this.transition = {};
    this.P2T = [];
    this.T2P = [];
    this.first = true;
  }

  PlotViewWidget.prototype._initialize = function () {
    var width = this._el.width(),
      height = this._el.height(),
      self = this;

    // set widget class
    this._el.addClass(WIDGET_CLASS);

    this._graph = null;
    this._paper = null;

    this._graph = new jointjs.dia.Graph();
    this._paper = new jointjs.dia.Paper({
      el: $(this._el),
      width: width,
      height: height,
      gridSize: 1,
      defaultAnchor: { name: "perpendicular" },
      defaultConnectionPoint: { name: "boundary" },
      model: this._graph,
    });

    this._paper.setInteractivity(true);
    this._paper.removeTools();

    this._paper.on("element:pointerdown", function (elementView) {
      var currentElement = elementView.model;
      console.log(currentElement);
    });

    this._place = jointjs.dia.Element.define(
      "network.Place",
      {
        attrs: {
          circle: {
            r: 25,
            "stroke-width": 3,
            stroke: "#000000",
            fill: "#aabbaa",
            cursor: "pointer",
          },
          text: {
            "font-weight": "800",
            "text-anchor": "middle",
            "ref-x": -5,
            "ref-y": -20,
            ref: "circle",
            cursor: "pointer",
          },
          label: {
            "font-weight": "400",
            "text-anchor": "middle",
            "ref-y": 20,
            ref: "circle",
            cursor: "pointer",
          },
        },
      },
      {
        markup: [
          {
            tagName: "circle",
            selector: "circle",
          },
          {
            tagName: "text",
            selector: "text",
          },
          {
            tagName: "text",
            selector: "label",
          },
        ],
      }
    );
  };

  PlotViewWidget.prototype.onWidgetContainerResize = function (width, height) {
    this._logger.debug("Widget is resizing...");
    if (this._paper) {
      this._paper.setDimensions(width, height);
      this._paper.scaleContentToFit();
    }
  };

  // Adding/Removing/Updating items
  PlotViewWidget.prototype.addNode = function (desc) {
    this.initNetwork(desc);
  };

  PlotViewWidget.prototype.removeNode = function (gmeId) {};

  PlotViewWidget.prototype.updateNode = function (desc) {};

  /*PlotViewWidget.prototype.renderArcs = function (PVWidget) {
    for (var i; i < PVWidget.P2T.length; i++) {
      var desc = PVWidget.P2T[i];
      var P2T = new jointjs.shapes.standard.Link();

      // get the source and destination for this P2T
      var transition2 = PVWidget.transition[desc.pointerDst];
      //var transition = transitionNode[1];

      console.log("transition2: ");
      console.log(desc.pointerDst);

      var place2 = PVWidget.place[desc.pointerSrc];
      //var place = placeNode[1];

      console.log("place2: ");
      console.log(desc.pointerSrc);

      if (place2 && transition2) {
        P2T.source(place2);

        P2T.target(transition2);

        setTimeout(() => {
          P2T.findView(PVWidget._paper).sendToken(
            jointjs.V("circle", { r: 5, fill: "#feb662" }),
            1500,
            () => {
              console.log("token sent");
              transition2.attr("label/text", "1");
            }
          );
        }, 1000);
        PVWidget._graph.addCell([P2T]);
        //this.P2T.push(T2P);
      }
    }

    for (var j = 0; j < PVWidget.T2P.length; j++) {
      var T2P = new jointjs.shapes.standard.Link();
      var desc = PVWidget.T2P[j];

      // get the source and destination for this T2P
      var transition1 = PVWidget.transition[desc.pointerSrc];
      //var transition = transitionNode[1];

      console.log("transition1: ");
      console.log(desc.pointerSrc);

      var place1 = PVWidget.place[desc.pointerDst];
      //var place = placeNode[1];

      console.log("place1: ");
      console.log(desc.pointerDst);

      if (transition1 && place1) {
        T2P.source(transition1);

        T2P.target(place1);

        setTimeout(() => {
          T2P.findView(PVWidget._paper).sendToken(
            jointjs.V("circle", { r: 5, fill: "#feb662" }),
            1500,
            () => {
              console.log("token sent");
              transition1.attr("label/text", "1");
            }
          );
        }, 1000);
        PVWidget._graph.addCell([T2P]);
        //this.T2P.push(T2P);
      }
    }
  };*/

  //Actual simulator functions
  PlotViewWidget.prototype.initNetwork = function (desc) {
    /*if (this.first === true) {
      this.first = false;
      setTimeout(this.renderArc(this), 4000);
    }*/

    if (desc) {
      const pn = jointjs.shapes.pn;
      var place = 0;
      var transition = 0;
      var T2P = 0;
      var P2T = 0;

      var name = desc.name;
      var attr = desc.attributeValue.toString();

      if (desc.metaName === "Place") {
        //if (core.is_type_of(desc.node, this.META["Place"])) {
        place = new pn.Place({
          position: { x: 200 + this.index, y: 200 + this.index },
          attrs: {
            text: {
              text: name,
              "stroke-width": 3,
            },
            label: {
              text: "other",
            },
          },
          tokens: 3,
        });

        //var placeNode = [desc, place];

        this.place[desc.id] = place;
        console.log("place: ");
        console.log(desc.id);

        this._graph.addCell([place]);
        //this.renderArcs();
      } else if (desc.metaName === "Transition") {
        transition = new pn.Transition({
          position: { x: 500 + this.index, y: 160 + this.index },
          attrs: {
            text: {
              text: desc.name,
              "stroke-width": 3,
            },
            label: {
              text: "produce",
              fill: "#fe854f",
            },
            label: {
              fill: "#9586fd",
              stroke: "#9586fd",
            },
          },
        });

        //var transitionNode = [desc, transition];

        this.transition[desc.id] = transition;
        console.log("transition: ");
        console.log(desc.id);

        this._graph.addCell([transition]);
        //this.renderArcs();
      } else if (desc.metaName === "T2P") {
        if (desc.isConnection) {
          T2P = new jointjs.shapes.standard.Link();

          // get the source and destination for this T2P
          var transition1 = this.transition[desc.pointerSrc];
          //var transition = transitionNode[1];

          console.log("transition1: ");
          console.log(desc.pointerSrc);

          var place1 = this.place[desc.pointerDst];
          //var place = placeNode[1];
          //console.log("transition1: ");
          //console.log(desc.pointerSrc);
          //console.log("place1: ");
          //console.log(desc.pointerDst);

          //if (transition1 && place1) {
          T2P.source(transition1);

          T2P.target(place1);

          setTimeout(() => {
            T2P.findView(this._paper).sendToken(
              jointjs.V("circle", { r: 5, fill: "#feb662" }),
              1500,
              () => {
                console.log("token sent");
                //transition1.attr("label/text", "1");
              }
            );
          }, 1000);
          this._graph.addCell([T2P]);

          this.T2P.push(T2P);
          //}
        }
      } else if (desc.metaName === "P2T") {
        if (desc.isConnection) {
          P2T = new jointjs.shapes.standard.Link();

          // get the source and destination for this P2T
          var transition2 = this.transition[desc.pointerDst];
          //var transition = transitionNode[1];

          var place2 = this.place[desc.pointerSrc];
          //var place = placeNode[1];
          //console.log("transition2: ");
          //console.log(desc.pointerDst);
          //console.log("place2: ");
          //console.log(desc.pointerSrc);

          //if (place2 && transition2) {
          P2T.source(place2);

          P2T.target(transition2);

          setTimeout(() => {
            P2T.findView(this._paper).sendToken(
              jointjs.V("circle", { r: 5, fill: "#feb662" }),
              1500,
              () => {
                console.log("token sent");
                //transition2.attr("label/text", "1");
              }
            );
          }, 1000);
          this._graph.addCell([P2T]);
          this.P2T.push(T2P);
          //}
        }
      }

      this.index = this.index + 15;

      /*if (desc.metaName === "P2T") {
        if (desc.isConnection) {
          var transition1 = new pn.Transition({
            position: { x: 500, y: 160 },
            attrs: {
              text: {
                text: desc.pointerSrc,
                "stroke-width": 3,
              },
              label: {
                text: "produce",
                fill: "#fe854f",
              },
              label: {
                fill: "#9586fd",
                stroke: "#9586fd",
              },
            },
          });
          this._graph.addCell([transition1]);

          var transition2 = new pn.Transition({
            position: { x: 500, y: 160 },
            attrs: {
              text: {
                text: desc.pointerDst,
                "stroke-width": 3,
              },
              label: {
                text: "produce",
                fill: "#fe854f",
              },
              label: {
                fill: "#9586fd",
                stroke: "#9586fd",
              },
            },
          });
          this._graph.addCell([transition2]);
        }
      }*/

      /*else if (desc.meta === "T2P") {
        T2P = new jointjs.shapes.standard.Link();
        T2P.source(transition);
        T2P.target(place);
      } else if (desc.meta === "P2T") {
        P2T = new jointjs.shapes.standard.Link();
        P2T.source(place);
        P2T.target(transition);
      }*/

      /*const place1 = new pn.Place({
        position: { x: 100, y: 100 },
        attrs: {
          label: {
            text: "ready",
            fill: "#7c68fc",
          },
          root: {
            stroke: "#9586fd",
            "stroke-width": 3,
          },
        },
        tokens: 3,
      });*/

      //this._graph.addCell([place, transition, T2P, P2T]);

      /*setTimeout(() => {
        T2P.findView(this._paper).sendToken(
          jointjs.V("circle", { r: 10, fill: "#feb662" }),
          2000,
          () => {
            console.log("token sent");
            place2.attr("label/text", "1");
          }
        );
      }, 1000);*/
    }
  };

  //click handling

  PlotViewWidget.prototype.onElementClick = function (elementView, event) {
    event.stopPropagation();
    console.log(elementView);
  };

  /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
  PlotViewWidget.prototype.destroy = function () {};

  PlotViewWidget.prototype.onActivate = function () {
    this._logger.debug("PlotViewWidget has been activated");
  };

  PlotViewWidget.prototype.onDeactivate = function () {
    this._logger.debug("PlotViewWidget has been deactivated");
  };

  return PlotViewWidget;
});
