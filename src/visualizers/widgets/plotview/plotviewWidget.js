/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Wed Nov 18 2020 08:29:26 GMT-0600 (Central Standard Time).
 */

define([
  "jointjs",
  "css!./styles/PlotViewWidget.css",
  "css!jointjscss",
], function (jointjs) {
  "use strict";

  var WIDGET_CLASS = "plot-view";

  function PlotViewWidget(logger, container) {
    this._logger = logger.fork("Widget");

    this._el = container;

    this.nodes = {};
    this._initialize();

    this._logger.debug("ctor finished");
    this.pxindex = 0;
    this.txindex = 0;
    this.pyindex = 0;
    this.tyindex = 0;
    this.first = true;
    this.p = [];
    this.place = {};
    this.t = [];
    this.transition = {};
    this.P2T = [];
    this.T2P = [];
    this.renderedList = [];
    /*this.place = {};
    this.transition = {};
    this.P2T = [];
    this.T2P = [];*/
  }

  PlotViewWidget.prototype._initialize = function () {
    var width = this._el.width(),
      height = this._el.height(),
      self = this;

    // set widget class
    this._el.addClass(WIDGET_CLASS);

    this._graph = null;
    this._paper = null;

    this._graph = new jointjs.dia.Graph();
    this._paper = new jointjs.dia.Paper({
      el: $(this._el),
      width: width,
      height: height,
      gridSize: 1,
      defaultAnchor: { name: "perpendicular" },
      defaultConnectionPoint: { name: "boundary" },
      model: this._graph,
    });

    this._paper.setInteractivity(true);
    this._paper.removeTools();

    this._paper.on("element:pointerdown", function (elementView) {
      var currentElement = elementView.model;
      //console.log(currentElement);
    });

    this._place = jointjs.dia.Element.define(
      "network.Place",
      {
        attrs: {
          circle: {
            r: 25,
            "stroke-width": 3,
            stroke: "#000000",
            fill: "#aabbaa",
            cursor: "pointer",
          },
          text: {
            "font-weight": "800",
            "text-anchor": "middle",
            "ref-x": -5,
            "ref-y": -20,
            ref: "circle",
            cursor: "pointer",
          },
          label: {
            "font-weight": "400",
            "text-anchor": "middle",
            "ref-y": 20,
            ref: "circle",
            cursor: "pointer",
          },
        },
      },
      {
        markup: [
          {
            tagName: "circle",
            selector: "circle",
          },
          {
            tagName: "text",
            selector: "text",
          },
          {
            tagName: "text",
            selector: "label",
          },
        ],
      }
    );
  };

  PlotViewWidget.prototype.onWidgetContainerResize = function (width, height) {
    this._logger.debug("Widget is resizing...");
    if (this._paper) {
      this._paper.setDimensions(width, height);
      this._paper.scaleContentToFit();
    }
  };

  // Adding/Removing/Updating items
  PlotViewWidget.prototype.addNode = function (desc) {
    this.storeNodes(desc);
    this.first = this.first + 1;
    /*if (this.first >= 4) {
      this.first = 0;
      //setInterval(this.renderNodes(), 4000);
      this.renderNodes();
    }*/
    this.clearRenderedNodes();
    this.renderNodes();
  };

  PlotViewWidget.prototype.removeNode = function (gmeId) {};

  PlotViewWidget.prototype.updateNode = function (desc) {};

  //Actual simulator functions
  PlotViewWidget.prototype.storeNodes = function (desc) {
    if (desc) {
      if (desc.metaName === "Place") {
        //var placeNode = [desc, place];

        this.place[desc.id] = desc;
        this.p.push(desc);
        //console.log("place: ");
        //console.log(desc.id);
      } else if (desc.metaName === "Transition") {
        //var transitionNode = [desc, transition];

        this.transition[desc.id] = desc;
        this.t.push(desc);
        //console.log("transition: ");
        //console.log(desc.id);
      } else if (desc.metaName === "T2P") {
        if (desc.isConnection) {
          //console.log("T2P: ");
          //console.log(desc.id);
          this.T2P.push(desc);
        }
      } else if (desc.metaName === "P2T") {
        if (desc.isConnection) {
          //console.log("P2T: ");
          //console.log(desc.id);
          this.P2T.push(desc);
        }
      }
    }
    //this.renderNodes();
  };

  PlotViewWidget.prototype.clearRenderedNodes = function () {
    var plen = this.renderedList.length;
    for (var i = 0; i < plen; i++) {
      this._graph.removeCells([this.renderedList[i]]);
    }
  };

  PlotViewWidget.prototype.renderNodes = function () {
    //console.log("renderNodes:");
    //console.log(this.p);
    var plen = this.p.length;
    for (var i = 0; i < plen; i++) {
      this.render(this.p[i]);
    }

    for (var i = 0; i < this.t.length; i++) {
      this.render(this.t[i]);
    }
    for (var i = 0; i < this.T2P.length; i++) {
      this.render(this.T2P[i]);
    }
    for (var i = 0; i < this.P2T.length; i++) {
      this.render(this.P2T[i]);
    }
  };

  //Actual simulator functions
  PlotViewWidget.prototype.render = function (desc) {
    if (desc) {
      const pn = jointjs.shapes.pn;
      var place = 0;
      var transition = 0;
      var T2P = 0;
      var P2T = 0;

      var name = desc.name;
      var attr = [];
      for (i = 0; i < desc.attributeValue.length; i++) {
        attr.push(desc.attributeValue[i].toString());
        console.log("place attr:");
        console.log(attr);
      }

      if (desc.metaName === "Place") {
        //if (core.is_type_of(desc.node, this.META["Place"])) {
        place = new pn.Place({
          position: { x: 100 + this.pxindex, y: 10 + this.pyindex },

          attrs: {
            text: {
              text: name + " (" + attr[0] + ")",
              "stroke-width": 3,
              fill: "#7c68fc",
            },
            label: {
              text: "other",
            },
          },
          tokens: 3,
        });
        this.pxindex = this.pxindex + 15;
        this.pyindex = this.pyindex + 15;

        //var placeNode = [desc, place];

        this.place[desc.id] = place;
        //console.log("place: ");
        //console.log(desc.id);

        this._graph.addCell([place]);
        this.renderedList.push(place);
        //this.renderArcs();
      } else if (desc.metaName === "Transition") {
        transition = new pn.Transition({
          position: { x: 300 + this.txindex, y: 10 + this.tyindex },
          attrs: {
            text: {
              text: desc.name,
              "stroke-width": 3,
              fill: "#7c68fc",
            },
            label: {
              text: "produce",
              fill: "#fe854f",
            },
            label: {
              fill: "#9586fd",
              stroke: "#9586fd",
            },
          },
        });
        this.txindex = this.txindex + 15;
        this.tyindex = this.tyindex + 15;

        //var transitionNode = [desc, transition];

        this.transition[desc.id] = transition;
        //console.log("transition: ");
        //console.log(desc.id);

        this._graph.addCell([transition]);
        this.renderedList.push(transition);
        //this.renderArcs();
      } else if (desc.metaName === "T2P") {
        if (desc.isConnection) {
          T2P = new jointjs.shapes.standard.Link();

          // get the source and destination for this T2P
          var transition1 = this.transition[desc.pointerSrc];
          //var transition = transitionNode[1];

          //console.log("transition1: ");
          //console.log(desc.pointerSrc);

          var place1 = this.place[desc.pointerDst];
          //var place = placeNode[1];
          //console.log("transition1: ");
          //console.log(desc.pointerSrc);
          //console.log("place1: ");
          //console.log(desc.pointerDst);

          if (transition1 && place1) {
            T2P.source(transition1);

            T2P.target(place1);

            /*setTimeout(() => {
              T2P.findView(this._paper).sendToken(
                jointjs.V("circle", { r: 5, fill: "#feb662" }),
                1500,
                () => {
                  console.log("token sent");
                  //transition1.attr("label/text", "1");
                }
              );
            }, 1000);*/
            this._graph.addCell([T2P]);
            this.renderedList.push(T2P);

            //this.T2P.push(T2P);
          }
        }
      } else if (desc.metaName === "P2T") {
        if (desc.isConnection) {
          P2T = new jointjs.shapes.standard.Link();

          // get the source and destination for this P2T
          var transition2 = this.transition[desc.pointerDst];
          //var transition = transitionNode[1];

          var place2 = this.place[desc.pointerSrc];
          //var place = placeNode[1];
          //console.log("transition2: ");
          //console.log(desc.pointerDst);
          //console.log("place2: ");
          //console.log(desc.pointerSrc);

          //if (place2 && transition2) {
          P2T.source(this.place[desc.pointerSrc]);

          P2T.target(this.transition[desc.pointerDst]);

          /*setTimeout(() => {
            P2T.findView(this._paper).sendToken(
              jointjs.V("circle", { r: 5, fill: "#feb662" }),
              1500,
              () => {
                console.log("token sent");
                //transition2.attr("label/text", "1");
              }
            );
          }, 1000);*/
          this._graph.addCell([P2T]);
          this.renderedList.push(P2T);
          //this.P2T.push(T2P);
          //}
        }
      }
    } else {
      console.log("no desc!");
    }
  };

  //click handling

  PlotViewWidget.prototype.onElementClick = function (elementView, event) {
    event.stopPropagation();
    console.log(elementView);
  };

  /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
  PlotViewWidget.prototype.destroy = function () {};

  PlotViewWidget.prototype.onActivate = function () {
    this._logger.debug("PlotViewWidget has been activated");
  };

  PlotViewWidget.prototype.onDeactivate = function () {
    this._logger.debug("PlotViewWidget has been deactivated");
  };

  return PlotViewWidget;
});
